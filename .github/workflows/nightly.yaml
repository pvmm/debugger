name: Nightly

on:
  push:
    branches:
      - master

env:
  ACTIONS_RUNNER_DEBUG: true

jobs:
  build-on-windows:
    uses: ./.github/workflows/workflow-build-on-windows.yaml
  build-on-macos:
    uses: ./.github/workflows/workflow-build-on-macos.yaml
  build-on-ubuntu:
    uses: ./.github/workflows/workflow-build-on-ubuntu.yaml
  nightly:
    name: Release packages automatically on push
    runs-on: ubuntu-latest
    needs: [build-on-windows, build-on-macos, build-on-ubuntu]
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
      - name: Get variables
        id: get-targets
        run: |
          find . -print
          windows_path=$(find . -maxdepth 1 -type d -name "openmsx-debugger-windows-*" -printf %f)
          echo "windows_path=$windows_path" >> $GITHUB_OUTPUT
          if [ "$windows_path" = "" ]; then
            echo "Windows package not found"
            exit 1
          fi
          macos_path=$(find . -maxdepth 1 -type d -name "openmsx-debugger-macos-*" -printf %f)
          echo "macos_path=$macos_path" >> $GITHUB_OUTPUT
          if [ "$macos_path" = "" ]; then
            echo "Mac OS package not found"
            exit 1
          fi
          ubuntu_path=$(find . -maxdepth 1 -type d -name "openmsx-debugger-ubuntu-*" -printf %f)
          echo "ubuntu_path=$ubuntu_path" >> $GITHUB_OUTPUT
          if [ "$ubuntu_path" = "" ]; then
            echo "Ubuntu package not found"
            exit 1
          fi
      - name: Package binaries as zip files
        run: |
          cd ${{ steps.get-targets.outputs.windows_path }}
          zip "${{ steps.get-targets.outputs.windows_path }}.zip" -r .
          cd ..
          mv ${{ steps.get-targets.outputs.windows_path }}/${{ steps.get-targets.outputs.windows_path }}.zip .
          cd ${{ steps.get-targets.outputs.macos_path }}
          zip "${{ steps.get-targets.outputs.macos_path }}.zip" -r .
          cd ..
          mv ${{ steps.get-targets.outputs.macos_path }}/${{ steps.get-targets.outputs.macos_path }}.zip .
          cd ${{ steps.get-targets.outputs.ubuntu_path }}
          zip "${{ steps.get-targets.outputs.ubuntu_path }}.zip" -r .
          cd ..
          mv ${{ steps.get-targets.outputs.ubuntu_path }}/${{ steps.get-targets.outputs.ubuntu_path }}.zip .

  release:
    runs-on: ubuntu-latest
    needs: nightly
    steps:
      - name: Create info file
        run: |
          echo "ref: ${GITHUB_REF}" > info.txt
          echo "commit: ${GITHUB_SHA}" >> info.txt
          echo "build: $(date +"%Y-%m-%dT%H:%M:%SZ")" >> info.txt

      - name: Update nightly release
        uses: eine/tip@master
        with:
          tag: nightly
          rm: true
          token: ${{ secrets.GITHUB_TOKEN }}
          files: info.txt *.zip

